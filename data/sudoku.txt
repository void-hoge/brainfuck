grid[9][9];
grid[0][0] = 5;
grid[0][1] = 3;
grid[0][2] = 0;
grid[0][3] = 0;
grid[0][4] = 7;
grid[0][5] = 0;
grid[0][6] = 0;
grid[0][7] = 0;
grid[0][8] = 0;

grid[1][0] = 6;
grid[1][1] = 0;
grid[1][2] = 0;
grid[1][3] = 1;
grid[1][4] = 9;
grid[1][5] = 5;
grid[1][6] = 0;
grid[1][7] = 0;
grid[1][8] = 0;

grid[2][0] = 0;
grid[2][1] = 9;
grid[2][2] = 8;
grid[2][3] = 0;
grid[2][4] = 0;
grid[2][5] = 0;
grid[2][6] = 0;
grid[2][7] = 6;
grid[2][8] = 0;

grid[3][0] = 8;
grid[3][1] = 0;
grid[3][2] = 0;
grid[3][3] = 0;
grid[3][4] = 6;
grid[3][5] = 0;
grid[3][6] = 0;
grid[3][7] = 0;
grid[3][8] = 3;


grid[4][0] = 4;
grid[4][1] = 0;
grid[4][2] = 0;
grid[4][3] = 8;
grid[4][4] = 0;
grid[4][5] = 3;
grid[4][6] = 0;
grid[4][7] = 0;
grid[4][8] = 1;


grid[5][0] = 7;
grid[5][1] = 0;
grid[5][2] = 0;
grid[5][3] = 0;
grid[5][4] = 2;
grid[5][5] = 0;
grid[5][6] = 0;
grid[5][7] = 0;
grid[5][8] = 6;

grid[6][0] = 0;
grid[6][1] = 6;
grid[6][2] = 0;
grid[6][3] = 0;
grid[6][4] = 0;
grid[6][5] = 0;
grid[6][6] = 2;
grid[6][7] = 8;
grid[6][8] = 0;

grid[7][0] = 0;
grid[7][1] = 0;
grid[7][2] = 0;
grid[7][3] = 4;
grid[7][4] = 1;
grid[7][5] = 9;
grid[7][6] = 0;
grid[7][7] = 0;
grid[7][8] = 5;

grid[8][0] = 0;
grid[8][1] = 0;
grid[8][2] = 0;
grid[8][3] = 0;
grid[8][4] = 8;
grid[8][5] = 0;
grid[8][6] = 0;
grid[8][7] = 7;
grid[8][8] = 9;

for (i = 0; i < 9; i += 1) {
    if (i % 3 == 0) {
        putchar('+');
        for (j = 0; j < 3; j += 1) {
            for (k = 0; k < 3; k += 1) {
                putchar('-'); putchar('-');
            }
            putchar('+');
        }
        putchar('\n');
    }
    for (j = 0; j < 9; j += 1) {
        if (j % 3 == 0) {
            putchar('|');
        }
        if (grid[i][j] == 0) {
            putchar(' ');
        } else {
            putint(grid[i][j]);
        }
        putchar(' ');
    }
    putchar('|');
    putchar('\n');
}
putchar('+');
for (i = 0; i < 3; i += 1) {
    for (j = 0; j < 3; j += 1) {
        putchar('-'); putchar('-');
    }
    putchar('+');
}
putchar('\n');
emptycells[2][9 * 9];
numempty = 0;
for (row = 0; row < 9; row += 1) {
    for (col = 0; col < 9; col += 1) {
        if (grid[row][col] == 0) {
            emptycells[0][numempty] = row;
            emptycells[1][numempty] = col;
            numempty += 1;
        }
    }
}
triednumbers[9 * 9];
k = 0;
while (k != 255 & k < numempty) {
    row = emptycells[0][k];
    col = emptycells[1][k];
    found = 0;
    num = triednumbers[k] + 1;
    while (num <= 9 & !found) {
        safe = 1;
        x = 0;
        while (x < 9 & safe) {
            if (grid[row][x] == num) {
                safe = 0;
            }
            x += 1;
        }
        x = 0;
        while (x < 9 & safe) {
            if (grid[x][col] == num) {
                safe = 0;
            }
            x += 1;
        }
        if (safe) {
            startrow = row - row % 3;
            startcol = col - col % 3;
            i = 0;
            while (i < 3 & safe) {
                j = 0;
                while (j < 3 & safe) {
                    if (grid[startrow + i][startcol + j] == num) {
                        safe = 0;
                    }
                    j += 1;
                }
                i += 1;
            }
        }
        if (safe) {
            grid[row][col] = num;
            triednumbers[k] = num;
            found = 1;
            k += 1;
        } else {
            num += 1;
        }
    }
    if (!found) {
        grid[row][col] = 0;
        triednumbers[k] = 0;
        k -= 1;
    }
}

if (k == numempty) {
    for (i = 0; i < 9; i += 1) {
        if (i % 3 == 0) {
            putchar('+');
            for (j = 0; j < 3; j += 1) {
                for (k = 0; k < 3; k += 1) {
                    putchar('-');
                    putchar('-');
                }
                putchar('+');
            }
            putchar('\n');
        }
        for (j = 0; j < 9; j += 1) {
            if (j % 3 == 0) {
                putchar('|');
            }
            if (grid[i][j] == 0) {
                putchar(' ');
            } else {
                putint(grid[i][j]);
            }
            putchar(' ');
        }
        putchar('|');
        putchar('\n');
    }
    putchar('+');
    for (i = 0; i < 3; i += 1) {
        for (j = 0; j < 3; j += 1) {
            putchar('-'); putchar('-');
        }
        putchar('+');
    }
    putchar('\n');
} else {
    putchar('n');
    putchar('o');
    putchar(' ');
    putchar('s');
    putchar('o');
    putchar('l');
    putchar('u');
    putchar('t');
    putchar('i');
    putchar('o');
    putchar('n');
    putchar('\n');
}
